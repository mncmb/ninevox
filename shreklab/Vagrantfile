require 'yaml'
inventory = YAML.load_file('inventory.yml')
vars = inventory['all']['vars']
vmgroups = inventory['all']['children']

if Gem.win_platform? then
    if(File.exist?('C:\Program Files\Oracle\VirtualBox\VBoxManage.exe')) 
      puts 'VBoxManage at default location'
      vboxmanage = "\"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\""
    end
else 
    puts "Requiring VBoxManage to be in path. Setup will fail, if it is not in path. Please configure path."
    vboxmanage = "vboxmanage"
end
if defined?(vboxmanage) then
    checkOutput = `#{vboxmanage} natnetwork list #{vars['net_adapter']}`
    if checkOutput.include? "0 networks" then
      createCommand = "#{vboxmanage} natnetwork add --netname #{vars['net_adapter']} --network \"#{vars['dhcp_range']}\" --enable --dhcp on"
      puts "NatNetwork adapter doesn't exist. Executing command:\n#{createCommand}"
      system(createCommand)
    else 
      puts "NatNetwork #{vars['net_adapter']} #{vars['dhcp_range']} already created. Skipping ..." 
    end
end

Vagrant.configure("2") do |config|
    vmgroups.each do |group,groupdetails| #TODO groups can be removed since no more ansible in use
        vmgroups[group]['hosts'].each do |host,details|
            config.vm.define host do |cfg|
                cfg.vm.box = details['vagrant_box']
                cfg.vm.box_check_update = false # we specifically set the version for most of them so it's stable
                cfg.vm.hostname = host
                # use the plaintext WinRM transport and force it to use basic authentication.
                # NB this is needed because the default negotiate transport stops working
                #    after the domain controller is installed.
                #    see https://groups.google.com/forum/#!topic/vagrant-up/sZantuCM0q4
                if details.key?('winrm_plain') ? details['winrm_plain']: false then 
                    cfg.winrm.transport = :plaintext
                    cfg.winrm.basic_auth_only = true
                end
                # set host specific timeouts if available
                cfg.vm.boot_timeout = details.key?('boot_timeout') ? details['boot_timeout']: vars['default_host']['boot_timeout']
                cfg.winrm.timeout = details.key?('timeout') ? details['timeout']: vars['default_host']['timeout']
                #cfg.vm.network :private_network, ip: host_ip
                cfg.vm.synced_folder '.', '/vagrant', disabled: false
                # provison_args = "-ip " + details['ip'] + " -domain " + vars['domain_name'] + " -dns " + dns_server

                # execute host specific scripts if there are any
                if details.key?('scripts') then
                    details['scripts'].each do |script_name,script_data|
                        cfg.vm.provision "shell" do |shell|
                            shell.path = script_data['path']
                            shell.args = script_data['args']
                            shell.env = {
                                VAGRANT_DOMAIN_NAME: vars['VAGRANT_DOMAIN_NAME'],
                                VAGRANT_PRIMARY_IFACE: vars['VAGRANT_PRIMARY_IFACE'],
                                VAGRANT_DC_IP: vars['VAGRANT_DC_IP'],
                                VAGRANT_HOST_IP: details.key?('host_ip') ? details['host_ip'] : "",
                                VAGRANT_DA_NAME: vars['VAGRANT_DA_NAME'],
                                VAGRANT_DA_PASS: vars['VAGRANT_DA_PASS'],
                                VAGRANT_USER_NAME: vars['VAGRANT_USER_NAME'],
                                VAGRANT_USER_PASS: vars['VAGRANT_USER_PASS'],
                                VAGRANT_SAFEMODE_PASS: vars['VAGRANT_SAFEMODE_PASS'],
                            } 
                            # shell.privileged = false
                        end
                        # reload if required after script
                        if script_data.key?('reload') ? script_data['reload'] : false then
                            cfg.vm.provision "reload"
                        end
                    end
                end

                cfg.vm.provider "virtualbox" do |vb, override|
                    vb.gui = details.key?('gui') ? details['gui']: true # by default provision VMs with gui and not headless
                    vb.name = 'shreklab_' + host
                    # vb.default_nic_type = "82545EM"
                    vb.customize ["modifyvm", :id, "--memory", details.key?('memory') ? details['memory']: vars['default_host']['memory']]
                    vb.customize ["modifyvm", :id, "--cpus", details.key?('cpus') ? details['cpus']: vars['default_host']['cpus']]
                    vb.customize ["modifyvm", :id, "--vram", "32"]
                    vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"] 
                    # check out '."C:\Program Files\Oracle\VirtualBox\VBoxManage.exe" modifyvm' for options
                    # [--nic<1-N> none|null|nat|bridged|intnet|hostonly|generic|natnetwork]
                    # set all network interfaces either via host specific or default config
                    modifyvm = details.key?('modifyvm') ? details['modifyvm']: vars['default_host']['modifyvm']
                    # TODO: rewrite this to do generic customizations via modifyvm, not only interfaces
                    modifyvm.each do |mod_name,mod_values|
                        #puts "setting modifyvm for id: #{:id}, args: #{mod_values[0]},#{mod_values[1]}"
                        vb.customize ["modifyvm", :id, mod_values[0], mod_values[1]] # eg ["--nic2", "natnetwork"]
                    end
                  # ... 
                end
            end
        end
    end
end
