# based on https://github.com/jborean93/ansible-windows/blob/master/vagrant/inventory.yml
# scriptX keys can be named anything, it doesn't matter - only path (and args) subkeys are used
all:
  children: #TODO children can be removed since no more ansible in use
    domain:
      hosts:
        router: # first box deployed, so that subnets do exist for all other machines
          vagrant_box: ubuntu/focal64
          cpus: 1
          memory: 512
          interfaces:
            adapter1: # Network Interface nic1 being NAT seems to be required for Virtualbox to work correctly
              type: ["--nic2", "natnetwork"]
              name: ["--nat-network2", "NatNetwork"]
            adapter2: 
              type: ["--nic3", "intnet"]
              name: ["--intnet3", "Internal1"]
            adapter3: 
              type: ["--nic4", "intnet"]
              name: ["--intnet4", "Internal2"]
          scripts:
            script1: 
              path: powershell/router/fwconf.sh
              reload: true # reload so options are applied correctly
        dc01:
          vagrant_box: gusztavvargadr/windows-server
          linked_clone: true # supposedly speeds up testing - can be removed later
          winrm_plain: true # necessary option that gets checked so that dc provisioning works in vagrant
          cpus: 2
          memory: 4096
          # host_ip ===> DC IP is set in VARS.ENV, see further below
          scripts:
            script1: 
              path: powershell/dc/01_create-domain.ps1
              args: ["100","100"]
              reload: true
            script2: 
              path: powershell/dc/02_setup-dc.ps1
        fs01:
          vagrant_box: gusztavvargadr/windows-server
          linked_clone: true
          cpus: 2
          memory: 2096
          host_ip: 10.10.100.12
          scripts:
            script1: 
              path: powershell/join-domain.ps1
              args: ["100","110"]
            script2: 
              path: powershell/fs/setup-fs.ps1
        #ws01001:
        #  vagrant_box: gusztavvargadr/windows-10
        #  linked_clone: true 
        #  #ansible_host: 10.0.2.21
        #  scripts:
        #    script1: 
        #      path: powershell/join-domain.ps1
        #      args: ["100"]
    # control:
    #   hosts:
    #     ansible:
    #       vagrant_box: ubuntu/jammy64
    #       linked_clone: true 
    #       ansible_host: 10.0.2.150
    #       cpus: 2
    #       memory: 2048
  vars:
    # these are default values for hosts, you can override them in the host-specific config above
    default_host:
      cpus: 1
      memory: 2096
      boot_timeout: 600
      timeout: 600
      interfaces:
        adapter3: 
              type: ["--nic2", "intnet"] #TODO
              name: ["--intnet2", "Internal2"] #TODO
      default_domain: #TODO
    env:
      VAGRANT_DOMAIN_NAME: sh.rek.lab
      VAGRANT_PRIMARY_IFACE: "Ethernet 2"
      VAGRANT_DC_IP: 10.10.100.10
    safemodeAdminPW: "MuCh S3cUr3, v3Ry P@ssW0rD!"
    ansible_user: vagrant
    ansible_password: vagrant
    ansible_port: 5985
    ansible_connection: winrm
    ansible_winrm_transport: basic
    ansible_winrm_server_cert_validation: ignore
    users:
      admin1:
        name: shrek
        pass: Swamp2023!
      user1:
        name: donkey
        pass: Passw0rd!
        description: "COME HERE, DONKEY!"

    # each protocol and host have their own port forward
    # the starting IP range (in thousands) is the 'host' variable
    # we add the host portion of the IP address to this e.g. dc01: rdp port is 20010, winrm is 22010, etc
    # we are theoretically maxed at a single network since a .10 on one network would clash with a .10 on another
    vagrant_ports:
      rdp:
        guest: 3389
        host: 30000
      ssh:
        guest: 22
        host: 31000
      winrm_http:
        guest: 5985
        host: 32000
      winrm_https:
        guest: 5986
        host: 33000
      smb:
        guest: 445
        host: 34000
